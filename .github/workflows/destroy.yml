name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "destroy" to confirm'
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-1
  TF_VERSION: 1.5.0

jobs:
  terraform-destroy:
    name: Destroy with Terraform
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'destroy'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Destroy
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        working-directory: ./infra/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=aws-batch-realtime-medallion/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_DDB_TABLE }}"
      
      - name: Get Terraform Outputs
        id: tf_outputs
        working-directory: ./infra/terraform
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          JSON=$(terraform output -json || echo '{}')
          DATALAKE=$(echo "$JSON" | jq -r '.datalake_bucket_name.value // empty')
          CODE=$(echo   "$JSON" | jq -r '.code_bucket_name.value // empty')
          # Fallback: try discover by name prefixes if outputs are missing
          if [ -z "$DATALAKE" ]; then
            DATALAKE=$(aws s3api list-buckets \
              --query "Buckets[?starts_with(Name, 'aws-batch-realtime-medallion-dev-datalake')].Name | [0]" \
              --output text || true)
            [ "$DATALAKE" = "None" ] && DATALAKE=""
          fi
          if [ -z "$CODE" ]; then
            CODE=$(aws s3api list-buckets \
              --query "Buckets[?starts_with(Name, 'aws-batch-realtime-medallion-dev-code')].Name | [0]" \
              --output text || true)
            [ "$CODE" = "None" ] && CODE=""
          fi
          echo "datalake_bucket=$DATALAKE" >> $GITHUB_OUTPUT
          echo "code_bucket=$CODE" >> $GITHUB_OUTPUT
      
      - name: Empty S3 Buckets (all versions)
        env:
          DATALAKE_BUCKET: ${{ steps.tf_outputs.outputs.datalake_bucket }}
          CODE_BUCKET: ${{ steps.tf_outputs.outputs.code_bucket }}
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          for B in "$DATALAKE_BUCKET" "$CODE_BUCKET"; do
            if [ -z "$B" ] || [ "$B" = "None" ]; then
              echo "Skip empty bucket variable"
              continue
            fi
            echo "Emptying bucket: $B"
            iter=0
            while true; do
              iter=$((iter+1))
              if [ $iter -gt 200 ]; then
                echo "Safety break after 200 iterations for $B" >&2
                break
              fi
              RESP=$(aws s3api list-object-versions --bucket "$B" --output json || echo '{}')
              VERS=$(echo "$RESP" | jq -c '[.Versions[]? | {Key:.Key, VersionId:.VersionId}]')
              DELS=$(echo "$RESP" | jq -c '[.DeleteMarkers[]? | {Key:.Key, VersionId:.VersionId}]')
              if [ "$VERS" = "[]" ] && [ "$DELS" = "[]" ]; then
                echo "No more versions or delete markers in $B"
                break
              fi
              if [ "$VERS" != "[]" ]; then
                echo "{\"Objects\": $VERS, \"Quiet\": false}" > delete.json
                aws s3api delete-objects --bucket "$B" --delete file://delete.json || true
              fi
              if [ "$DELS" != "[]" ]; then
                echo "{\"Objects\": $DELS, \"Quiet\": false}" > delete.json
                aws s3api delete-objects --bucket "$B" --delete file://delete.json || true
              fi
            done
          done
      
      - name: Terraform Destroy
        working-directory: ./infra/terraform
        run: terraform destroy -auto-approve
      
      - name: Destroy Summary
        run: |
          echo "### Destruction Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All infrastructure has been destroyed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Note**: S3 buckets may require manual deletion if they contain data." >> $GITHUB_STEP_SUMMARY
