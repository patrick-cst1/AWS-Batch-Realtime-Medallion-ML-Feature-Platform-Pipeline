name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "destroy" to confirm'
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-1
  TF_VERSION: 1.5.0

jobs:
  terraform-destroy:
    name: Destroy with Terraform
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'destroy'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Destroy
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        working-directory: ./infra/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=aws-batch-realtime-medallion/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_DDB_TABLE }}"
      
      - name: Get Terraform Outputs
        id: tf_outputs
        working-directory: ./infra/terraform
        run: |
          echo "datalake_bucket=$(terraform output -raw datalake_bucket_name)" >> $GITHUB_OUTPUT
          echo "code_bucket=$(terraform output -raw code_bucket_name)" >> $GITHUB_OUTPUT
      
      - name: Empty S3 Buckets (all versions)
        env:
          DATALAKE_BUCKET: ${{ steps.tf_outputs.outputs.datalake_bucket }}
          CODE_BUCKET: ${{ steps.tf_outputs.outputs.code_bucket }}
        run: |
          for B in "$DATALAKE_BUCKET" "$CODE_BUCKET"; do
            if [ -n "$B" ]; then
              while true; do
                VERS=$(aws s3api list-object-versions --bucket "$B" --query 'Versions[].{Key:Key,VersionId:VersionId}' --output json || echo "[]")
                DELMS=$(aws s3api list-object-versions --bucket "$B" --query 'DeleteMarkers[].{Key:Key,VersionId:VersionId}' --output json || echo "[]")
                if [ "$VERS" = "[]" ] && [ "$DELMS" = "[]" ]; then break; fi
                if [ "$VERS" != "[]" ]; then
                  echo "{\"Objects\": $VERS, \"Quiet\": false}" > delete.json
                  aws s3api delete-objects --bucket "$B" --delete file://delete.json || true
                fi
                if [ "$DELMS" != "[]" ]; then
                  echo "{\"Objects\": $DELMS, \"Quiet\": false}" > delete.json
                  aws s3api delete-objects --bucket "$B" --delete file://delete.json || true
                fi
              done
            fi
          done
      
      - name: Terraform Destroy
        working-directory: ./infra/terraform
        run: terraform destroy -auto-approve
      
      - name: Destroy Summary
        run: |
          echo "### Destruction Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All infrastructure has been destroyed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Note**: S3 buckets may require manual deletion if they contain data." >> $GITHUB_STEP_SUMMARY
